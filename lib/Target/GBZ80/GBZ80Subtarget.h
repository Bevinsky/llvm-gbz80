//===-- GBZ80Subtarget.h - Define Subtarget for the GBZ80 -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the GBZ80 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_GBZ80_SUBTARGET_H
#define LLVM_GBZ80_SUBTARGET_H

#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetSubtargetInfo.h"

#include "GBZ80FrameLowering.h"
#include "GBZ80ISelLowering.h"
#include "GBZ80InstrInfo.h"
#include "GBZ80SelectionDAGInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "GBZ80GenSubtargetInfo.inc"

namespace llvm {

/// A specific GBZ80 target MCU.
class GBZ80Subtarget : public GBZ80GenSubtargetInfo {
public:
  //! Creates an GBZ80 subtarget.
  //! \param TT  The target triple.
  //! \param CPU The CPU to target.
  //! \param FS  The feature string.
  //! \param TM  The target machine.
  GBZ80Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               GBZ80TargetMachine &TM);

  const GBZ80InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override { return &FrameLowering; }
  const GBZ80TargetLowering *getTargetLowering() const override { return &TLInfo; }
  const GBZ80SelectionDAGInfo *getSelectionDAGInfo() const override { return &TSInfo; }
  const GBZ80RegisterInfo *getRegisterInfo() const override { return &InstrInfo.getRegisterInfo(); }

  bool enableSubRegLiveness() const override { return true; }

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  // Subtarget feature getters.
  // See GBZ80.td for details.
  bool hasMBC() const { return m_MBC1 || m_MBC2 || m_MBC3; }
  bool hasMBC1() const { return m_MBC1; }
  bool hasMBC2() const { return m_MBC2; }
  bool hasMBC3() const { return m_MBC3; }
  bool hasRAM() const { return m_RAM; }
  bool hasBattery() const { return m_Battery; }
  bool hasRTC() const { return m_RTC; }

  // TODO: put stuff like asking about addresses, getting ROM/RAM/RTC address
  // for writing to etc

private:
  GBZ80InstrInfo InstrInfo;
  GBZ80FrameLowering FrameLowering;
  GBZ80TargetLowering TLInfo;
  GBZ80SelectionDAGInfo TSInfo;

  // Subtarget feature settings
  // See GBZ80.td for details.
  bool m_MBC1;
  bool m_MBC2;
  bool m_MBC3;
  bool m_RAM;
  bool m_Battery;
  bool m_RTC;

};

} // end namespace llvm

#endif // LLVM_GBZ80_SUBTARGET_H
